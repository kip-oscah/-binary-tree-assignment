#include <iostream>
#include <vector>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> result;
        if (root == nullptr) {
            return result;
        }

        
        postorderHelper(root, result);

        return result;
    }

private:
    void postorderHelper(TreeNode* node, vector<int>& result) {
        if (node == nullptr)
            return;

        // Traverse left subtree
        postorderHelper(node->left, result);

       // Traverse right subtree
       postorderHelper(node->right, result);

    ode
       result.push_back(node->val);
   }
};

int main() {

   /*
   Construct a sample binary tree here...


   TreeNode* root = new TreeNode(1);
   root->left = new TreeNode(2);
   root->right = new TreeNode(3);
   root->left->left= new TreeNode(4);


   
Solution sol; 
vector<int> postOrderTraversalResult = sol.postOrderTraversal(root);


cout << "Postorder Traversal: ";
for (int i = ; i < postOrderTraversalResult.size(); ++i)
 cout << postOrderTraversalResult[i] << " ";

return ;

}
